<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="InstagramDAO">
	<!-- 검색 데이터 가져오기 -->
	<select id="getSearchList" resultType="userinfo">
		/*InstagramDAO.getSearchList*/
		SELECT UI.USER_IDX
			 , UI.USER_NICKNAME
			 , UI.USER_INTRO
			 , UP.FILE_NAME
		  FROM INSTAGRAM.USER_INFO UI
		  LEFT JOIN INSTAGRAM.USER_PHOTO UP 
		  ON UI.USER_IDX = UP.USER_IDX
 	</select>
 	
 	<!-- 새 피드 저장하기 -->
 	<insert id="setSaveNewFeed" parameterType="feedlist">
		/*InstagramDAO.setSaveNewFeed*/
	 	INSERT INTO instagram.feed_list
			(
				USER_IDX
				, FEED_CONTENTS
				, REGDATE
				, USE_YN
			)
		VALUES
			(
				#{user_idx}
				, #{feed_contents}
				, NOW()
				, 'Y'
			) 	
 	</insert>
 	
 	<select id="getNewFeedIdx" parameterType="feedlist" resultType="int">
		/*InstagramDAO.getNewFeedIdx*/
		SELECT MAX(FEED_IDX) FROM INSTAGRAM.FEED_LIST
		 WHERE USER_IDX = #{user_idx} 	 
 	</select>
 	
 	<!-- 새  피드 이미지 파일 저장하기 -->
 	<insert id="setSaveNewFeedFile" parameterType="feedphoto">
		/*InstagramDAO.setSaveNewFeedFile*/
	 	INSERT INTO INSTAGRAM.FEED_PHOTO
			(
				FEED_IDX
				, FILE_NAME
				, FILE_PATH
			)
		VALUES
			(
				#{feed_idx}
				, #{file_name}
				, NULL
			);
 	</insert>
 	
 	<!-- 새 스토리 저장하기 -->
 	<insert id="setSaveNewStory" parameterType="storylist">
		/*InstagramDAO.setSaveNewStory*/
	 	INSERT INTO INSTAGRAM.STORY_LIST
			(
				USER_IDX
				, REGDATE
				, USE_YN
			)
		VALUES
			(
				#{user_idx}
				, NOW()
				, #{use_yn}
			)
 	</insert>
 	
 	<select id="getNewStoryIdx" parameterType="storylist" resultType="int">
		/*InstagramDAO.getNewStoryIdx*/
		SELECT MAX(STORY_IDX) FROM INSTAGRAM.STORY_LIST
		 WHERE USER_IDX = #{user_idx}  	 
 	</select>
 	
 	<!-- 새 스토리 이미지 파일 저장하기 -->
 	<insert id="setSaveNewStoryFile" parameterType="storyphoto">
	 	INSERT INTO INSTAGRAM.STORY_PHOTO
			(
				STORY_IDX
				, FILE_NAME
				, FILE_PATH
			)
		VALUES
			(
				#{story_idx}
				, #{file_name}
				, NULL
			)
 	</insert>
 	
 	<!-- 홈 스토리 리스트 가져오기 -->
 	<select id="getStoryList" parameterType="storylist" resultType="storylist">
   	   <!-- WITH : 임시테이블 SL 생성 -->
   	   WITH SL AS (
			SELECT MAX(SL.STORY_IDX) AS STORY_IDX 
			     , SL.USER_IDX
			FROM STORY_LIST SL
			GROUP BY SL.USER_IDX 
		)
		SELECT SL.STORY_IDX 
			 , SL.USER_IDX
			 , UI.USER_NICKNAME 
		     , UP.FILE_NAME 
		  FROM SL
		LEFT JOIN USER_INFO UI
		ON SL.USER_IDX = UI.USER_IDX
		LEFT JOIN USER_PHOTO UP 
		ON SL.USER_IDX = UP.USER_IDX
		ORDER BY SL.STORY_IDX DESC
 	</select>
 	
 	<!-- 선택한 홈 스토리 팝업 -->
 	<select id="getStoryPopup" parameterType="storylist" resultType="storylist">
   	    SELECT SL.STORY_IDX
			 , SL.USER_IDX
			 , SL.REGDATE
			 , SP.FILE_NAME AS STORY_FILE_NAME
			 , UI.USER_NICKNAME 
			 , UP.FILE_NAME
		  FROM STORY_LIST SL
		  INNER JOIN STORY_PHOTO SP 
		  ON SL.STORY_IDX = SP.STORY_IDX
		  INNER JOIN USER_INFO UI 
		  ON UI.USER_IDX = SL.USER_IDX 
		  LEFT JOIN USER_PHOTO UP 
		  ON UI.USER_IDX = UP.USER_IDX 
		  WHERE SL.USER_IDX = #{user_idx}
		  ORDER BY SL.STORY_IDX
 	</select>
 	
 	<!-- 홈 피드 리스트 가져오기 -->
 	<select id="getFeedList" parameterType="feedlist" resultType="feedlist">
   	   SELECT FL.FEED_IDX 
			, FL.FEED_CONTENTS 
			, FL.REGDATE 
			, FL.FILE_NAMES
			, FL.USER_NICKNAME
			, FL.USER_IDX
			, UP.FILE_NAME
			, MAX(FL2.LIKE_TYPE) AS LIKE_TYPE
			, COUNT(FL2.LIKE_TYPE) AS LIKE_COUNT
			, FL.COMMENT_COUNT
		FROM (	
		   SELECT FL.FEED_IDX 
				, FL.FEED_CONTENTS 
				, FL.REGDATE 
				, FL.FILE_NAMES
				, FL.USER_NICKNAME
				, FL.USER_IDX 
				, FR.COMMENT_COUNT
		     from (
			   SELECT FL.FEED_IDX 
					, FL.FEED_CONTENTS 
					, FL.REGDATE 
					, JSON_ARRAYAGG(FP.FILE_NAME) AS FILE_NAMES
					, UI.USER_NICKNAME
					, UI.USER_IDX
				 FROM FEED_LIST FL
				INNER JOIN FEED_PHOTO FP
				ON FL.FEED_IDX = FP.FEED_IDX 
				INNER JOIN USER_INFO UI 
				ON FL.USER_IDX = UI.USER_IDX
				GROUP BY FL.FEED_IDX
			) FL
			LEFT JOIN (
			   SELECT COUNT(FEED_REPLY_IDX) AS COMMENT_COUNT
			        , FEED_IDX
			   FROM FEED_REPLY FR
		   	   GROUP BY FEED_IDX 
	   	    ) FR 
	   		ON FL.FEED_IDX = FR.FEED_IDX 
		) FL
		LEFT JOIN FEED_LIKE FL2 
		ON FL.FEED_IDX = FL2.FEED_IDX
		LEFT JOIN USER_PHOTO UP 
		ON FL.USER_IDX = UP.USER_IDX 
		GROUP BY FL.FEED_IDX, UP.FILE_NAME 
		ORDER BY FL.REGDATE DESC
 	</select>
 	
 	<!-- 선택한 홈 피드 팝업 -->
 	<select id="getFeedPopup" parameterType="feedlist" resultType="feedlist">
   	   SELECT FL.FEED_IDX 
			, FL.FEED_CONTENTS 
			, FL.REGDATE 
			, FL.FILE_NAMES
			, FL.USER_IDX
			, FL.USER_NICKNAME
			, FL.USER_PROFILE
			, MAX(FL2.LIKE_TYPE) AS LIKE_TYPE
			, COUNT(FL2.LIKE_TYPE) AS LIKE_COUNT
			, FL.FEED_REPLY_LIST
		FROM (
			SELECT FL.FEED_IDX 
					, FL.FEED_CONTENTS 
					, FL.REGDATE
					, FL.USER_IDX
					, FL.FILE_NAMES
					, FL.USER_PROFILE
					<!-- 피드 리플 리스트 구성요소 JSON ARRAY -->
					, JSON_ARRAYAGG(
						JSON_OBJECT(
						        'feed_reply_idx', FR.FEED_REPLY_IDX ,
						        'user_idx', FR.USER_IDX ,
						        'feed_reply_contents', FR.FEED_REPLY_CONTENTS,
						        'user_nickname', UI.USER_NICKNAME,
						        'user_profile', UP.FILE_NAME 
				      	)
					) AS FEED_REPLY_LIST
					, FL.USER_NICKNAME
				FROM (
					<!-- 피드 컨텐츠 구성요소 세팅 -->
					SELECT FL.FEED_IDX
						, FL.FEED_CONTENTS 
						, FL.REGDATE
						, FL.USER_IDX
						, MAX(UP.FILE_NAME) AS USER_PROFILE
						, JSON_ARRAYAGG(FP.FILE_NAME) AS FILE_NAMES
						, UI.USER_NICKNAME
					 FROM FEED_LIST FL
					INNER JOIN FEED_PHOTO FP
					ON FL.FEED_IDX = FP.FEED_IDX
					<!-- 피드에 대한 유저 정보를 가져오기 위한 INNER JOIN -->
					INNER JOIN USER_INFO UI 
					ON FL.USER_IDX = UI.USER_IDX
					LEFT JOIN USER_PHOTO UP 
					ON FL.USER_IDX = UP.USER_IDX		
					WHERE FL.FEED_IDX = #{feed_idx}
					GROUP BY FL.FEED_IDX 
				) FL
				<!-- 피드 댓글 리스트 LEFT JOIN -->
				LEFT JOIN FEED_REPLY FR 
				ON FL.FEED_IDX = FR.FEED_IDX
				<!-- 댓글에 대한 유저 정보를 가져오기 위한 INNER JOIN -->
				LEFT JOIN USER_INFO UI 
				ON FR.USER_IDX = UI.USER_IDX
				LEFT JOIN USER_PHOTO UP 
				ON FR.USER_IDX = UP.USER_IDX	
				GROUP BY FL.FEED_IDX 
		) FL
		<!-- 피드 좋아요 정보 LEFT JOIN -->
		LEFT JOIN FEED_LIKE FL2 
		ON FL.FEED_IDX = FL2.FEED_IDX 
		GROUP BY FL.FEED_IDX 
		ORDER BY FL.REGDATE DESC
 	</select>
 	
 	<!-- 피드 좋아요 저장 -->
 	<insert id="setInsertFeedLike" parameterType="feedlike">
	 	INSERT INTO INSTAGRAM.FEED_LIKE
			(
				FEED_IDX
				, USER_IDX
				, LIKE_TYPE
			)
		VALUES
			(
				#{feed_idx}
				, #{user_idx}
				, 1
			)
 	</insert>
 	
 	<!-- 피드 좋아요 삭제 -->
 	<delete id="setDeleteFeedLike" parameterType="feedlike">
	 	DELETE FROM INSTAGRAM.FEED_LIKE
		WHERE FEED_IDX = #{feed_idx}
		  AND USER_IDX = #{user_idx}
 	</delete>
 	
 	<!-- 피드 댓글 저장 -->
 	<insert id="setFeedReply" parameterType="feedreply">
	 	INSERT INTO INSTAGRAM.FEED_REPLY
			(
				FEED_IDX
				, USER_IDX
				, FEED_REPLY_CONTENTS
				, PIDX
			)
		VALUES
			(
				#{feed_idx}
				, #{user_idx}
				, #{feed_reply_contents}
				, 0
			)
	</insert>
	
	<!-- 프로필 피드 리스트 가져오기 -->
 	<select id="getProfileFeedList" parameterType="feedlist" resultType="feedlist">
   	  SELECT FL.FEED_IDX 
		   , FL.FEED_CONTENTS 
		   , FL.REGDATE 
		   , FP.FILE_NAME
		   , UI.USER_NICKNAME
		   , FL2.LIKE_COUNT
		   , FR.COMMENT_COUNT
	    FROM FEED_LIST FL
	   INNER JOIN (
		   SELECT FP2.FEED_IDX
				, FP2.FEED_PHOTO_IDX
				, FP2.FILE_NAME AS FILE_NAME
			FROM (
					SELECT MIN(FEED_PHOTO_IDX) AS FEED_PHOTO_IDX
					     , FEED_IDX
						FROM FEED_PHOTO
					GROUP BY FEED_IDX
			) FP
			INNER JOIN FEED_PHOTO FP2
			ON FP.FEED_PHOTO_IDX = FP2.FEED_PHOTO_IDX
	   ) FP
	   ON FL.FEED_IDX = FP.FEED_IDX 
	   INNER JOIN USER_INFO UI 
	   ON FL.USER_IDX = UI.USER_IDX
	   LEFT JOIN (
		   SELECT COUNT(LIKE_TYPE) AS LIKE_COUNT
		         ,FEED_IDX
		       FROM FEED_LIKE FL2
		   GROUP BY FEED_IDX 
	   ) FL2
	   ON FL.FEED_IDX = FL2.FEED_IDX 
	   LEFT JOIN (
		   SELECT COUNT(FEED_REPLY_IDX) AS COMMENT_COUNT
		        , FEED_IDX
		   FROM FEED_REPLY FR
		   GROUP BY FEED_IDX 
	   ) FR 
	   ON FL.FEED_IDX = FR.FEED_IDX 
	   WHERE FL.USER_IDX = #{user_idx}
	   ORDER BY FL.REGDATE DESC
 	</select>
 	
 	<!-- 프로필 정보 가져오기 -->
	<select id="getProfileInfo" parameterType="userinfo" resultType="userinfo">
		SELECT UI.USER_IDX
		     , UI.USER_ID
		     , UI.USER_NAME
			 , UI.USER_NICKNAME 
		 	 , UI.USER_INTRO 
			 , UI.USER_INFO
			 , UP.FILE_NAME 
			 , F.FOLLOWER_USER_IDX
		FROM USER_INFO UI 
		LEFT JOIN USER_PHOTO UP 
		ON UI.USER_IDX = UP.USER_IDX
		LEFT JOIN FOLLOW F 
		ON UI.USER_IDX = F.FOLLOWING_USER_IDX 
		AND F.FOLLOWER_USER_IDX = #{session_user_idx}
		WHERE UI.USER_IDX = #{user_idx}
	</select>
	
 	<!-- 프로필 상단 피드 갯수 가져오기 -->
	<select id="getProfileFeedCnt" parameterType="userinfo" resultType="int">
		SELECT 	COUNT(FEED_IDX) 
		FROM 	FEED_LIST
		WHERE 	USER_IDX = #{user_idx}
	</select>
	
	<!-- 프로필 상단 팔로워 갯수 가져오기 -->
	<select id="getProfileFollowerCnt" parameterType="userinfo" resultType="int">
		SELECT 	COUNT(FOLLOW_IDX)
		FROM 	FOLLOW
		WHERE 	FOLLOWING_USER_IDX = #{user_idx}
	</select>
	
	<!-- 프로필 상단 팔로우 갯수 가져오기 -->
	<select id="getProfileFollowCnt" parameterType="userinfo" resultType="int">
		SELECT 	COUNT(FOLLOW_IDX)
		FROM 	FOLLOW
		WHERE 	FOLLOWER_USER_IDX = #{user_idx}
	</select>
	
	<!-- 프로필 정보 저장(&수정) -->
	<update id="setProfileInfo" parameterType="userinfo">
		UPDATE INSTAGRAM.USER_INFO
		SET USER_INTRO = #{user_intro}
			<if test='"Y".equals(user_name_chg)'>
				, USER_NAME = #{user_name}
			</if>
			<if test='"Y".equals(user_nickname_chg)'>
				, USER_NICKNAME = #{user_nickname}
			</if>
			<if test='"Y".equals(user_pw_chg)'>
				, USER_PW = #{user_pw}
			</if>
		WHERE USER_IDX= #{user_idx}
	</update>
	
	<!-- 프로필 이미지 저장 -->
	<insert id="insertProfileImgFile" parameterType="userphoto">
	 	<!-- 기존값 없을때는 insert -->
	 	INSERT INTO INSTAGRAM.USER_PHOTO
			(
				USER_IDX
				, FILE_NAME
				, FILE_PATH
			)
		VALUES
			(
				#{user_idx}
				, #{file_name}
				, NULL
			)
	</insert>
	<update id="updateProfileImgFile" parameterType="userphoto">
	 	<!-- 기존값 있을때는 update -->
	 	UPDATE 	INSTAGRAM.USER_PHOTO
		SET 	FILE_NAME = #{file_name}
		WHERE 	USER_IDX = #{user_idx}
	</update>
 	<select id="selectProfileImgFile" parameterType="userphoto" resultType="userphoto">
 		SELECT 	FILE_NAME FROM INSTAGRAM.USER_PHOTO
		WHERE 	USER_IDX = #{user_idx}
 	</select>
 	
 	<!-- 팔로우 -->
 	<insert id="setInsertFollow" parameterType="follow">
	 	INSERT INTO INSTAGRAM.FOLLOW
		(
				FOLLOWING_USER_IDX
				, FOLLOWER_USER_IDX
		)
		VALUES
		(
				#{following_user_idx}
				, #{follower_user_idx}
		)
 	</insert>
 	
 	<!-- 언팔로우 -->
 	<delete id="setDeleteFollow" parameterType="follow">
	 	DELETE FROM INSTAGRAM.FOLLOW
		WHERE FOLLOWING_USER_IDX = #{following_user_idx}
		  AND FOLLOWER_USER_IDX = #{follower_user_idx}
 	</delete>
 	
 	<!-- 팔로잉 리스트 가져오기 -->
 	<select id="getfollowing" parameterType="follow" resultType="follow">
	 	SELECT 		F.FOLLOWING_USER_IDX	 	
		      , 	UI.USER_NAME
		      , 	UI.USER_NICKNAME
		      , 	UP.FILE_NAME 
		FROM 		FOLLOW F
		INNER JOIN 
					USER_INFO UI ON UI.USER_IDX = F.FOLLOWER_USER_IDX 
		LEFT JOIN 
					USER_PHOTO UP ON UI.USER_IDX = UP.USER_IDX 
		WHERE 		
					FOLLOWING_USER_IDX = #{following_user_idx}
 	</select>
 	
 	<!-- 팔로워 리스트 가져오기 -->
 	<select id="getfollower" parameterType="follow" resultType="follow">
	 	SELECT F.FOLLOWER_USER_IDX
	 		  , UI.USER_IDX		      
	 		  , UI.USER_NAME
		      , UI.USER_NICKNAME
		      , UP.FILE_NAME 
		FROM FOLLOW F
		INNER JOIN USER_INFO UI
		ON UI.USER_IDX = F.FOLLOWING_USER_IDX 
		LEFT JOIN USER_PHOTO UP
		ON UI.USER_IDX = UP.USER_IDX 
		WHERE FOLLOWER_USER_IDX = #{follower_user_idx}
 	</select>
 	
 	<!-- 계정 추천 리스트 가져오기 -->
 	<select id="getRecommendList" resultType="userinfo">
		SELECT UI.USER_IDX
			 , UI.USER_NICKNAME
			 , UI.USER_NAME
			 , UI.USER_INTRO
			 , UP.FILE_NAME
		  FROM INSTAGRAM.USER_INFO UI
		  LEFT JOIN INSTAGRAM.USER_PHOTO UP 
		  ON UI.USER_IDX = UP.USER_IDX
		  WHERE UI.USER_IDX NOT IN (SELECT F.FOLLOWING_USER_IDX 
									FROM FOLLOW F 
									WHERE F.FOLLOWER_USER_IDX = #{user_idx})
		  AND UI.USER_IDX <![CDATA[<>]]> #{user_idx}					
		  ORDER BY RAND() LIMIT 5 
 	</select>
 	
 	<!-- 피드 삭제 -->
 	<delete id="deleteFeed" parameterType="feedlist">
	 	DELETE FROM INSTAGRAM.FEED_LIST
		WHERE FEED_IDX = #{feed_idx}
 	</delete>
 	
 	<!-- 스토리 삭제 -->
 	<delete id="deleteStory" parameterType="storylist">
	 	DELETE FROM INSTAGRAM.STORY_LIST
		WHERE STORY_IDX = #{story_idx}
 	</delete>
 	
 	<!-- 피드 댓글 삭제 -->
 	<delete id="deleteReply" parameterType="feedreply">
	 	DELETE FROM INSTAGRAM.FEED_REPLY
		WHERE FEED_REPLY_IDX = #{feed_reply_idx}
 	</delete>
</mapper>
